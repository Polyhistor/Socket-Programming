package server;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

public class clientgui extends javax.swing.JFrame {
public Thread readThread;                    //main thread
public Thread loginThread;                   //login thread unused
public Thread sendThread;                    //thread for uploading the file
public Thread getThread;                     //thread for download the file
public Thread dirThread;                     // thread to get the directory listing
public    int port=2345;                     // port to bind to this is defulted to 2345
public	String server="localhost";           // remorte server address defulting to localhost
public	Socket socket=null;                  // socket connection to client
public	DataInputStream input=null;          // stream in from client
public	DataOutputStream output=null;        // stream out to client
public	Hashtable files = new Hashtable();   // file storage
public  String Cl = null;
public  String BasePath = "D:\\";            // intial directory to server and store files from
public  String localSelction = null;         // local file handler
public  String remoteSelction = null;        // remote file handler
public  int chunksize = 10024;                // file chunk size
public String command_Text = "";             // command

    public clientgui() {
        initComponents();                    //innit paint components
    }

    private void ensureEventThread() {                  //method to make sure the threads does not lock up repainting
         if(SwingUtilities.isEventDispatchThread()) {
      return;
    }
    throw new RuntimeException("file");
    }

    private void fillBList(String[] str) {            //method to fill up the local base directory listing
                 ensureEventThread();
                 bList.removeAll();
                 bList.setListData(str);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        baspath = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        txtserver = new javax.swing.JTextField();
        txtremote = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        severlist = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jDialog1.setName("jDialog1"); // NOI18N

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(51, 255, 51));
        jButton1.setFont(new java.awt.Font("Raleway", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/server/Apps-system-software-update-icon.png"))); // NOI18N
        jButton1.setText("Start");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jFileChooser1.setName("jFileChooser1"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial Unicode MS", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("FTP Client");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jLabel1.setName("jLabel1"); // NOI18N

        baspath.setText("Client's Default Directory");
        baspath.setName("baspath"); // NOI18N
        baspath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baspathActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setText("jButton3");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtserver.setName("txtserver"); // NOI18N

        txtremote.setName("txtremote"); // NOI18N
        txtremote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtremoteActionPerformed(evt);
            }
        });
        txtremote.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtremoteInputMethodTextChanged(evt);
            }
        });

        jLabel2.setText("Server");
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText("Port");
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        bList.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        bList.setName("bList"); // NOI18N
        bList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(bList);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        severlist.setName("severlist"); // NOI18N
        severlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                severlistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(severlist);

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setFont(new java.awt.Font("Raleway", 0, 11)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/server/Applications-icon.png"))); // NOI18N
        jButton4.setText("Server Directory");
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Raleway", 0, 11)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/server/Download-icon.png"))); // NOI18N
        jButton5.setText("Dwonload");
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(51, 51, 51));
        jButton6.setFont(new java.awt.Font("Raleway", 0, 11)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/server/upload-icon.png"))); // NOI18N
        jButton6.setText("Upload");
        jButton6.setName("jButton6"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(153, 153, 153));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/server/Set-Program-Access-icon.png"))); // NOI18N
        jButton7.setText("Set");
        jButton7.setName("jButton7"); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel4.setText("Directory");
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)
                                .addComponent(txtserver, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtremote, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(baspath, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtserver, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(txtremote, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(baspath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jButton7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
startserver();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void baspathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baspathActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_baspathActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     JFileChooser chooser = new JFileChooser();                             //set the base path
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);

    if(returnVal == JFileChooser.APPROVE_OPTION) {
        setTextSafely("Base Path set to ->" +
            chooser.getSelectedFile().getPath());
       baspath.setText(chooser.getSelectedFile().getPath());
       BasePath = chooser.getSelectedFile().getPath();
       updateBaseDirList(BasePath);
    }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        command_Text = "Server Directory";                                                   //brows command action listner
        updateBaseDirList(BasePath);
        startserver();

    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtremoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtremoteActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtremoteActionPerformed

    private void bListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bListMouseClicked

        localSelction = bList.getSelectedValue().toString();                //get local file handel
        setTextSafely("Local Selction -> "+localSelction);
        

    }//GEN-LAST:event_bListMouseClicked

    private void severlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_severlistMouseClicked
        remoteSelction = severlist.getSelectedValue().toString();               //remote file handeler
        setTextSafely("Remort Selction -> "+remoteSelction);
    }//GEN-LAST:event_severlistMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        command_Text = "get";                                                      //start download
            startserver();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtremoteInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtremoteInputMethodTextChanged
                 // TODO add your handling code here:
}//GEN-LAST:event_txtremoteInputMethodTextChanged

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if(!txtserver.getText().isEmpty()){                                     //set server address and port
           if(isthisanip(txtserver.getText())){
               server = txtserver.getText();
             }
            setTextSafely(server + "is not a valid ip address server set to default local host" );

        }
        if(!txtremote.getText().isEmpty()){
            port = Integer.parseInt(txtremote.getText());
             }
          setTextSafely("Remort server ip set to -> "+server);
          setTextSafely("Remort port set to -> "+port);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        command_Text = "put";                                              // putbutton method
        startserver();

    }//GEN-LAST:event_jButton6ActionPerformed
private boolean
    isthisanip(String iPaddress){
    String _255 = "(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
Pattern p = Pattern.compile( "^(?:" + _255 + "\\.){3}" + _255 + "$");
        
    return p.matcher(iPaddress).matches();
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new clientgui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList bList;
    private javax.swing.JTextField baspath;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList severlist;
    private javax.swing.JTextField txtremote;
    private javax.swing.JTextField txtserver;
    // End of variables declaration//GEN-END:variables

    private void startserver() {
          ensureEventThread();
    Runnable readRun = new Runnable() {
      public void run() {
        try{

                        socket = new Socket(server, port);
                        try {
                            
                            if (socket.isConnected())
                            {
                             setTextSafely(" Connected to server");
                             input = new DataInputStream(socket.getInputStream());
                             output = new DataOutputStream(socket.getOutputStream());
                             if(command_Text.equalsIgnoreCase("dir")){
                             dir(input, output);
                             output.flush();
                             }
                             if(command_Text.equalsIgnoreCase("put")){
                             sendFile(input, output);
                             output.flush();
                             }
                             if(command_Text.equalsIgnoreCase("get")){
                             getFile(input, output);
                             output.flush();
                             }else{
                                 dir(input, output);
                                 output.flush();
                             }
                             socket.close();
                            
                            }
                           
                             boolean shutdown = false;                         
                        }catch(Exception e){
                            setTextSafely("main thread..."+e.toString());
                            e.printStackTrace();
                        }                      
        }catch(Exception e){
                   e.printStackTrace();
        } finally {
          }
      }
    public void   stop(){
                try {
                    output.writeUTF("BYE");
                    socket.close();
                } catch (IOException ex) {
                    setTextSafely("Error closting connection "+ex.getLocalizedMessage());  
                }
      }
     private void dir(final DataInputStream in, final DataOutputStream on){
        DataInputStream i = in; 
        DataOutputStream o = on;
         try{
                      o.writeUTF("dir");
                        String Files[] = new String [i.readInt()] ;

                       o.writeInt(Files.length);
                            for (int j = 0, n = Files.length; j < n; j++) {
                                 Files[j] = i.readUTF();
                                setTextSafely(Files[j].toString());
                            }
                       o.flush();
                            setListSafely(Files);

                            setTextSafely("Finished listing remort dir");
        }catch(Exception e){
                    try {
                        o.writeUTF("NCK");
                    } catch (IOException ex) {
                        Logger.getLogger(clientgui.class.getName()).log(Level.SEVERE, null, ex);
                    }
            setTextSafely("Error in comunications...."+e.getLocalizedMessage());
        } finally {
                    try {
                        o.flush();
                        //o.close();
                        //i.close();
                    } catch (IOException ex) {
                        Logger.getLogger(clientgui.class.getName()).log(Level.SEVERE, null, ex);
                    }
          }
      }
    };
    readThread = new Thread(readRun);
    readThread.start();
    }
    private void setTextSafely(final String t) {
    Runnable r = new Runnable() {
      public void run() {
        try {
          setText(t);
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }
    };
    SwingUtilities.invokeLater(r);
  }
    private void getFile(final DataInputStream i, final DataOutputStream o){
     Runnable getFileRun = new Runnable() {
      public void run() {
                        setTextSafely("starting to recive file");
        try{
                       o.writeUTF("get");
                       setTextSafely("starting to recive file");
                       long start = System.currentTimeMillis();
                       int bytesRead;
                       int current = 0;
                       setTextSafely("Connecting...");
                       o.writeUTF(remoteSelction);
                       int filesize = i.readInt();
                       byte [] mybytearray  = new byte [filesize];
                       FileOutputStream fos = new FileOutputStream(BasePath+"\\"+remoteSelction);
                       setTextSafely("opend the file");
                       BufferedOutputStream bos = new BufferedOutputStream(fos);
                       byte bytes[] = new byte[chunksize];
                       int writecount;
                       while (filesize > 0) {
                       writecount = (filesize >= chunksize ? chunksize : (int)filesize);
                            int a =  i.read(bytes, 0, writecount);
                            System.out.println(a);
                            bos.write(bytes, 0,  a);
                            filesize = filesize - a;   
                        }
                        bos.flush();
                        long end = System.currentTimeMillis();
                        System.out.println(end-start);
                        setTextSafely("stored the file");
                        fos.close();
                    }catch(Exception e){
                    try {
                        o.writeUTF("NCK");
                    } catch (IOException ex) {
                        Logger.getLogger(clientgui.class.getName()).log(Level.SEVERE, null, ex);
                    }
            setTextSafely("Error in comunications...."+e.getLocalizedMessage());
        } finally {

          }

      }

    };
   getThread = new Thread (getFileRun);
   getThread.run();
  }

    private void sendFile(final DataInputStream i, final DataOutputStream o){
     Runnable sendFileRun = new Runnable() {
     public void run() {
                      setTextSafely("starting to send file");
        try{
                      o.writeUTF("put");
                      o.flush();
                      setTextSafely("put sent ");

                        setTextSafely(BasePath+"\\"+localSelction);
                        File myFile = new File (BasePath+"\\"+localSelction);
                        byte [] mybytearray  = new byte [(int)myFile.length()];
                        FileInputStream fis = new FileInputStream(myFile);
                        BufferedInputStream bis = new BufferedInputStream(fis);
                        long lenth=bis.available();
                        o.writeInt((int)lenth);
                        o.writeUTF(localSelction);
                        setTextSafely("Sending...");
                        byte bytes[] = new byte[chunksize];
                        int writecount;
                        while (lenth > 0) {
                        writecount = (lenth >= chunksize ? chunksize : (int)lenth);
                           int i = bis.read(bytes, 0, writecount);
                           System.out.println(i);
                           o.write(bytes, 0, i);
                           lenth = lenth - i;
                        }
                        o.flush();
                        setTextSafely("the file");
        }catch(Exception e){
                    try {
                        o.writeUTF("NCK");
                    } catch (IOException ex) {
                        Logger.getLogger(clientgui.class.getName()).log(Level.SEVERE, null, ex);
                    }
            setTextSafely("Error in comunications...."+e.getLocalizedMessage());
            e.printStackTrace();
        } finally {

          }
      }
    };
   sendThread = new Thread (sendFileRun);
   sendThread.run();
  }

 private void dir(final DataInputStream i, final DataOutputStream o){
     Runnable dirRun = new Runnable() {
      public void run() {
                      setTextSafely("starting to list  remote Dir");

        try{
                      o.writeUTF("dir");
                        String Files[] = new String [i.readInt()] ;
                        
                       o.writeInt(Files.length);
                            for (int j = 0, n = Files.length; j < n; j++) {
                                 Files[j] = i.readUTF();    
                                setTextSafely(Files[j].toString());
                             
                            }
                       o.flush();
                            setListSafely(Files);

                            setTextSafely("Finished listing remort dir");
        }catch(Exception e){
                    try {
                        o.writeUTF("NCK");
                    } catch (IOException ex) {
                        Logger.getLogger(clientgui.class.getName()).log(Level.SEVERE, null, ex);
                    }
            setTextSafely("Error in comunications...."+e.getLocalizedMessage());
        } finally {
          }
      }
    };
   dirThread = new Thread (dirRun);
   dirThread.run();
  }
 private void setListSafely(final String t[]) {
    Runnable r = new Runnable() {
      public void run() {
        try {
          fillList(t);
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }
    };
    SwingUtilities.invokeLater(r);
  }

  private void fillList(String items[]) {
                 ensureEventThread();
                 severlist.removeAll();
                 severlist.setListData(items);
            }

  private void setText(String t) {
    ensureEventThread();
    jTextArea1.setText(jTextArea1.getText()+"\n"+t);
  }

    private void updateBaseDirList(String BasePath) {
         File path = new File(BasePath);
        File Filelist [];
        Filelist = path.listFiles();
        String[] str = new String [Filelist.length];
        for(int k =0;k<str.length; k++){
            str[k] = Filelist[k].getName();
        }
        fillBList(str);
    }

}
